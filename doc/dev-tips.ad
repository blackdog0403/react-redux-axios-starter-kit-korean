= Plumber 개발 시 유용한 팁
:toc:
:toclevels: 3

== PropTypes 지정
- PropTypes : 컴포넌트의 Prop은 외부로부터 값을 지정받기 때문에 검증이 필요

[source, javascript]
----
React.PropTypes.array           // 배열
React.PropTypes.bool.isRequired // Boolean, 필수
React.PropTypes.func            // 함수
React.PropTypes.number          // 정수
React.PropTypes.object          // 객체
React.PropTypes.string          // 문자열
React.PropTypes.node            // Render가 가능한 객체
React.PropTypes.element         // React Element
React.PropTypes.instanceOf(XXX) // XXX의 instance
React.PropTypes.oneOf(['foo', 'bar']) // foo 또는 bar
React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.array]) // 문자열 또는 배열
React.PropTypes.arrayOf(React.PropTypes.string)  // 문자열을 원소로 가지는 배열
React.PropTypes.objectOf(React.PropTypes.string) // 문자열을 값으로 가지는 객체
React.PropTypes.shape({                          // 지정된 형식을 충족하는지
  color: React.PropTypes.string,
  fontSize: React.PropTypes.number
});
React.PropTypes.any.isRequired  // 어떤 타입이든 가능하지만 필수

// 커스텀 제약도 정의 가능
customPropType: function(props, propName, componentName) {
  if (!/^[0-9]/.test(props[propName])) {
    return new Error('Validation failed!');
  }
}
----

== Component Lifecycle
=== componentWillMount()
- 컴포넌트가 DOM 트리에 추가되기 전 한 번만 호출됨. 초기화 처리를 하는 데 사용할 수 있음. 이 안에서 setState하면 render 시에 사용. Server-side rendering 시에도 호출되므로 어느 쪽에서도 동작할 수 있는 코드를 작성해야 함.

=== componentDidMount()
- 컴포넌트가 DOM 트리에 추가된 상태에 호출됨. DOM과 관련된 초기화를 하고 싶을 때 사용. componentWillMount()와 달리 Server-side rendering 시에 호출되지 않음. 따라서 DOM을 다루는 처리 외에, Ajax 요청이나 setInterval 등의 Server-side rendering 시에는 불필요한 초기화 처리는 이 메서드를 통해 진행.

=== componentWillReceiveProps(nextProps)
- Prop이 갱신될 때 호출. 컴포넌트가 새로운 DOM 트리에 추가될 때는 호출되지 않음. 부모 컴포넌트의 State가 Prop으로 전달되고, 그 값이 변화할 때 화면의 표시 이외 Notification 같은 추가 작업을 이 메서드를 통해 진행. 마지막으로 Prop의 값에 따라 State의 값을 갱신 할 때에도 사용.

=== shouldComponentUpdate()
- true나 false를 반환해야함. 컴포넌트가 rerender 하기 전에 호출되며, 만약 false를 반환하면 VirtualDOM 비교를 하지 않고 rerender도 하지 않음. 즉, 독자적으로 Prop이나 State 비교 처리를 구현하는 것으로 불필요한 계산을 하지 않을 수 있음. 이 메서드가 반환하는 기본값은 true 이므로 재정의 하지 않으면 항상 rerender하며, 강제적으로 rerender 하고자 할땐 forceUpdate()를 사용. forceUpdate()가 호출되는 경우엔 shouldComponentUpdate()는 호출되지 않음.
[source, javascript]
----
shouldComponentUpdate: function(nextProps, nextState) {
  return nextProps.user !== this.props.user || nextState.user !== this.state.user;
}
----

=== componentWillUpdate(nextProps, nextState)
- 컴포넌트가 갱신되기 전에 호출. 최초엔 호출되지 않음. 이 안에서는 setState를 호출할 수 없으므로 Prop의 값을 이용해 setState 하고 싶은 경우엔 componentWillReceiveProps()를 사용.

=== componentDidUpdate(prevProps, prevState)

- 컴포넌트가 갱신된 뒤에 호출. 최초엔 호출되지 않음. DOM의 변화에 hook 하여 또 다른 작업을 하고 싶을 때 사용.

=== componentWillUnmount()
- 컴포넌트가 DOM에서 삭제될 때 호출. 이벤트 해제 같은 clean-up 처리 시 할 때 사용. ComponentDidMount()에서 등록한 Timer의 처리나 DOM의 이벤트 등은 여기에서 해제해야 함.

=== isMounted()
- 개발 시 Ajax를 요청하고 그 결과를 setState 하는 패턴이 자주 발생함. 그때 Ajax의 응답이 왔을 때 컴포넌트가 이미 Unmount 된 경우가 있는데, 바로 setState나 forceUpdate를 호출하면 에러가 발생하게 됨. 따라서 isMounted()를 사용해 방어 코드를 작성할 필요가 있음.
[source, javascript]
----
componentDidMount() {
  request.get('/path/to/api', res => {
    if (this.isMounted()) {
      this.setState({data: res.body.data});
    }
  });
}
----

== Key
Each child in an array should have a unique "key" prop. Check the render method of KeyTrap. See http://fb.me/react-warning-keys for more information.

- 위와 같은 경고가 출력 된 경우.

React에서 여러 컴포넌트를 동적으로 생성하여 표시할 때 반드시 고유의 key를 주어야함. 표시하고자 하는 각 항목이 id가 있는 경우라면 id를 사용하면 되겠지만, id가 없는 경우라면 항목의 index를 key로 넘기고자 하는 유혹이 생김.
실제로 index를 key로 넘기더라도 각 Element의 종류에 따라 별문제 없이 동작하기도 하지만, index 순서에 의해 문제가 생기는 경우가 있으므로 index 사용은 지양.

eg) key로 unique한 값 사용 (지향)
[source, javascript]
----
<TableBody displayRowCheckbox={this.state.showCheckboxes} showRowHover={this.state.showRowHover}>
  {this.state.filteredNodes.map((node, index) => (
    <TableRow key={node.id} style={{cursor: 'pointer'}}>
      <TableRowColumn>{index + 1}</TableRowColumn>
      <TableRowColumn>{node.name}</TableRowColumn>
----

eg) key로 index 값 사용 (지양)
[source, javascript]
----
{this.props.metadatas.map((row, index) => (
  row.subType === 'REDII'
  ? <MenuItem id={'dockerFromRegistryId_' + row.name} key={index} value={row.id} primaryText={row.name}
    onClick={partial(this.clickFromImgRepoSelect, row)}>
    <div style={styles.repoSelectLeftFieldStyle}>{row.url === null ? '-' : row.url}</div>
    <div style={styles.repoSelectCenterFieldStyle}>{row.loginId}</div>
  </MenuItem>
  : <MenuItem key={index} />
))}
----

== props 와 state
- 참고 : https://github.com/uberVU/react-guide/blob/master/props-vs-state.md
 